"""
Django settings for arvmain project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from decouple import config
from pathlib import Path
import dj_database_url
from django.core.mail import EmailMessage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ON_RAILWAY = config('ON_RAILWAY', default=False, cast=bool)
ON_CODESPACE = config('ON_CODESPACE', default=False, cast=bool)

# Email config
EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST=config('EMAIL_HOST', cast=str, default='smtp.gmail.com')
EMAIL_PORT=config('EMAIL_PORT', cast=str, default='587') # Use 465 if use SSL
EMAIL_USE_TLS=config('EMAIL_USE_TLS', cast=bool, default=True)
EMAIL_HOST_USER=config('EMAIL_HOST_USER', cast=str, default=None)
EMAIL_HOST_PASSWORD=config('EMAIL_HOST_PASSWORD', cast=str, default=None)
DEFAULT_FROM_EMAIL=config('DEFAULT_FROM_EMAIL', default=None)
SERVER_EMAIL=config('DEFAULT_FROM_EMAIL', default=None)

# Later change this to get from user input
ADMIN_USER_NAME=config('ADMIN_USER_NAME', default='Admin')
ADMIN_USER_EMAIL=config('ADMIN_USER_EMAIL', default='hariri.bin.abdullah@gmail.com')

ADMINS=[]
MANAGERS=[]
if all([ADMIN_USER_NAME, ADMIN_USER_EMAIL]):
    # 500 errors are emailed to these users
    ADMINS +=[
        (f'{ADMIN_USER_NAME}', f'{ADMIN_USER_EMAIL}')
    ]
    MANAGERS=ADMINS

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', cast=bool)

ALLOWED_HOSTS = []

if ON_RAILWAY:
    ALLOWED_HOSTS += [
        '.railway.app',
    ]
else:
    ALLOWED_HOSTS += [
        '127.0.0.1',
        'localhost',
    ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'commando',
    # Third party app
    'django_tailwind_cli',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # required for Whitenoise
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'allauth.account.middleware.AccountMiddleware', # required for Allauth
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CSRF_TRUSTED_ORIGINS = []

#check if using codespace
if ON_CODESPACE:
    codespace_name = config("CODESPACE_NAME")
    codespace_domain = config("GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN")
    CSRF_TRUSTED_ORIGINS = [f'https://{codespace_name}-8000.{codespace_domain}', 'https://localhost:8000']
    INSTALLED_APPS += [
        'django_browser_reload',
    ]
    MIDDLEWARE += [
        'django_browser_reload.middleware.BrowserReloadMiddleware',
    ]
    X_FRAME_OPTIONS = 'ALLOW-FROM preview.app.github.dev'

ROOT_URLCONF = 'arvmain.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'arvmain.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

raw_db_url = config('DATABASE_URL', default='').strip()

if raw_db_url:
    try:
        DATABASES = {
            'default': dj_database_url.parse(raw_db_url, conn_max_age=600),
        }
    except dj_database_url.UnknownSchemeError:
        # Fallback to SQLite if malformed DATABASE_URL
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Enable DaisyUI
TAILWIND_CLI_USE_DAISY_UI = True

#  django Allauth Config
LOGIN_REDIRECT_URL = '/'
ACCOUNT_SIGNUP_FIELDS = ['username', 'email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[SaaS] '
ACCOUNT_LOGIN_METHODS = {
    'email',
    'username',
}

# Tailwind Optimized for production
# TAILWIND_CLI_VERSION = "4.3.0"  # Pin version
TAILWIND_CLI_AUTOMATIC_DOWNLOAD = False  # Use pre-installed CLI
TAILWIND_CLI_DIST_CSS = "css/tailwind.min.css"

AUTHENTICATION_BACKENDS = [
    # ...
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    # ...
]

# Allauth Provider specific settings
SOCIALACCOUNT_PROVIDERS = {}

if ON_RAILWAY:
    CSRF_TRUSTED_ORIGINS = [
        'https://*.railway.app',
        'http://*.railway.app',
        ]
    
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kuala_Lumpur'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_BASE_DIR = BASE_DIR / 'staticfiles'
STATICFILES_BASE_DIR.mkdir(exist_ok=True, parents=True)

STATICFILES_VENDOR_DIR = STATICFILES_BASE_DIR / 'vendors'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# source (s) for python manage.py collectstatic
STATICFILES_DIRS = [
    STATICFILES_BASE_DIR
]

# output for python manage.py collectstatic
# local cdn --> prod cdn
STATIC_ROOT = BASE_DIR / 'local-cdn'

#  Whitenoise forever-cacheable files and compression support
#  To prevent error 500, implement whitenoise storage first before deploy to railway, or makesure do not collectstatic before adding storage backend for whitenoise
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
